#       Copyright 2017-2019 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#Deploy the pod
apiVersion: v1
kind: DeploymentConfig
metadata:
  name: portfolio
  labels:
    app: stock-trader
  annotations:
    prism.subkind: Liberty
spec:
  replicas: 1
  triggers:
    - type: "ConfigChange"
    - type: "ImageChange"
      imageChangeParams:
        automatic: true
        containerNames:
          - "portfolio"
        from:
          kind: "ImageStreamTag"
          name: "portfolio:latest"
  template:
    metadata:
      labels:
        app: portfolio
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
    spec:
      containers:
      - name: portfolio
#       image: portfolio:latest # Microservice Builder
#       image: mycluster.icp:8500/stock-trader/portfolio:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/portfolio:latest # IBM Kubernetes Service
        image: image-registry.openshift-image-registry.svc:5000/stock-trader/portfolio:latest # Docker Hub
        env:
          - name: JDBC_HOST
            valueFrom:
              secretKeyRef:
                name: db2
                key: host
          - name: JDBC_PORT
            valueFrom:
              secretKeyRef:
                name: db2
                key: port
          - name: JDBC_DB
            valueFrom:
              secretKeyRef:
                name: db2
                key: db
          - name: JDBC_ID
            valueFrom:
              secretKeyRef:
                name: db2
                key: id
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db2
                key: pwd
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: mq
                key: id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mq
                key: pwd
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: mq
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: mq
                key: port
          - name: MQ_CHANNEL
            valueFrom:
              secretKeyRef:
                name: mq
                key: channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              secretKeyRef:
                name: mq
                key: queue-manager
          - name: MQ_QUEUE
            valueFrom:
               secretKeyRef:
                 name: mq
                 key: queue
          - name: WATSON_URL
            valueFrom:
              secretKeyRef:
                name: watson
                key: url
          - name: WATSON_ID
            valueFrom:
              secretKeyRef:
                name: watson
                key: id
                optional: true
          - name: WATSON_PWD
            valueFrom:
              secretKeyRef:
                name: watson
                key: pwd
          - name: ODM_URL
            valueFrom:
              secretKeyRef:
                name: odm
                key: url
                optional: true
          - name: ODM_ID
            valueFrom:
              secretKeyRef:
                name: odm
                key: id
                optional: true
          - name: ODM_PWD
            valueFrom:
              secretKeyRef:
                name: odm
                key: pwd
                optional: true
          - name: KAFKA_TOPIC
            valueFrom:
              secretKeyRef:
                name: kafka
                key: topic
                optional: true
          - name: KAFKA_ADDRESS
            valueFrom:
              secretKeyRef:
               name: kafka
               key: address
               optional: true
          - name: KAFKA_USER
            valueFrom:
             secretKeyRef:
               name: kafka
               key: user
               optional: true
          - name: KAFKA_API_KEY
            valueFrom:
             secretKeyRef:
                name: kafka
                key: api-key
                optional: true
          # location of the keystore.  See below comments about volumeMount
          - name: KAFKA_KEYSTORE
            valueFrom:
              secretKeyRef:
                name: kafka
                key: keystore
                optional: true
          - name: STOCK_QUOTE_URL
            valueFrom:
              configMapKeyRef:
                name: urls
                key: stock-quote
                optional: true
          - name: TRADE_HISTORY_URL
            valueFrom:
              configMapKeyRef:
               name: urls
               key: trade-history
               optional: true
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                name: keycloak-oidc
                key: OIDC_ISSUER
                optional: true
          - name: OIDC_JWKS_URL
            valueFrom:
              secretKeyRef:
                name: keycloak-oidc
                key: OIDC_JWKS_URL
                optional: true
          - name: JWT_AUDIENCE
            value: trader
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: keycloak-oidc
                key: OIDC_ISSUER
                optional: true
          - name: AUTH_TYPE
            value: keycloak
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          initialDelaySeconds: 90
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 5 # Allow a little time to exec into the pod to grab FFDCs before it's killed
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
      #  Uncomment the following lines to get the keystore from the secret
#        volumeMounts:
#        - mountPath: /keystores
#          name: kafka-keystore-volume
#          readOnly: true
#      volumes:
#      - name: kafka-keystore-volume
#        secret:
#         secretName: kafka-keystore
---
#Deploy the autoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: portfolio-hpa
  labels:
    solution: stock-trader
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: portfolio
  maxReplicas: 10
  minReplicas: 2
  targetCPUUtilizationPercentage: 60
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  labels:
    app: portfolio
    solution: stock-trader
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
spec:
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: portfolio
